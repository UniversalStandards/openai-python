# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
            - name: Docker build and push
  # You may pin to the exact commit or the version.
  # uses: cloudposse/github-action-docker-build-push@51728c18e98e68a3365054e724b186912d8cbe16
  uses: cloudposse/github-action-docker-build-push@1.16.0
  with:
    # List of extra privileged entitlement (e.g., network.host,security.insecure)
    allow: # optional
    # Set the networking mode for the RUN instructions during build
    network: # optional
    # BuildKit daemon flags
    buildkitd-flags: # optional, default is --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
    # List of additional driver-specific options. (eg. image=moby/buildkit:master)
    driver-opts: # optional
    # Working directory
    workdir: # optional, default is ./
    # Dockerfile name
    file: # optional, default is Dockerfile
    # List of build-time variables
    build-args: # optional
    # Organization
    organization: 
    # Repository
    repository: 
    # Docker registry
    registry: 
    # Sets the target stage to build
    target: # optional, default is 
    # List of target platforms for build (e.g. linux/amd64,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,etc)
    platforms: # optional, default is linux/amd64
    # Generate provenance attestation for the build
    provenance: # optional
    # Image name (excluding registry). Defaults to {{$organization/$repository}}.
    image_name: # optional, default is 
    # Docker login
    login: # optional, default is 
    # Docker password
    password: # optional, default is 
    # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
    cache-from: # optional, default is type=gha
    # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
    cache-to: # optional, default is type=gha,mode=max
    # Send the --no-cache flag to the docker build process
    no-cache: # optional, default is false
    # List of SSH agent socket or keys to expose to the build
    ssh: # optional
    # List of tags (supports https://github.com/docker/metadata-action#tags-input)
    tags: # optional
    # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
    secrets: # optional
    # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
    secret-files: # optional
    # Set to `true` to tag images with the PR HEAD SHA instead of the merge commit SHA within pull requests.
    docker-metadata-pr-head-sha: # optional, default is false
    # Enable debug mode
    debug: # optional, default is false
          


name: Setup Node.js environment
uses: actions/setup-node@v4.0.2
with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
          


name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
